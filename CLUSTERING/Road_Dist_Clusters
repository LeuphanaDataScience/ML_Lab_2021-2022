import matplotlib.pyplot as plt
import warnings
from shapely.geometry import Point

# to switch the warnings off
#from shapely.errors import ShapelyDeprecationWarning
#warnings.filterwarnings("ignore", category=DeprecationWarning)
#warnings.filterwarnings('ignore', "", UserWarning)
#warnings.filterwarnings('ignore', "", ShapelyDeprecationWarning)
#to supress all warnings:
#warnings.filterwarnings("ignore")

import osmnx as ox
import pandas as pd
#import numpy as np
import geopandas as gp
from collections import defaultdict
get_ipython().run_line_magic('matplotlib', 'inline')
ox.config(log_console=True)

#Uploading files with passengers distributions
bus_stops_people_1 = pd.read_csv('city_stops_and_passengers_1.csv')
bus_stops_people_2 = pd.read_csv('city_stops_and_passengers_2.csv')
bus_stops_people_3 = pd.read_csv('city_stops_and_passengers_3.csv')

#uploading matrix with distances among stations
matrix = pd.read_csv('full_distance_matrix_lueneburg.csv', sep=";", index_col = 'name')

#we do not want column with our destination to be included:
matrix = matrix.drop(["Schlachthof", "Hagen Wendeplatz"], axis = 1)

#list of distances to arena:
distances_to_arena = list(matrix.loc["Schlachthof"])

#we do not want index with our destination and    to be included:
matrix = matrix.drop(["Schlachthof", "Hagen Wendeplatz"], axis = 0)

#list of bus stop names
bus_names = list(matrix.columns)

#creating the dataframe with bus_stops and people assigned to them:
bus_stops_df = bus_stops_people_3 #you should choose the passengers distribution
bus_stops_df.index = bus_stops_df['name']
bus_stops_df= bus_stops_df.drop('name', axis = 1)

#CLUSTERING ALGORITHM with CLOUD approach

distances_to_arena_check = distances_to_arena.copy() #list of possible 
bus_names_check = bus_names.copy()
capacity = 70 #how many people we can get from one cluster

def cloud_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check):
    cluster_nodelist_dict = defaultdict(list)
    cluster_number = 0  # cluster number
    while len(bus_names_check) != 0:#iterate till all nodes are assigned to clusters
        people_assigned = 0
        max_dist = max(distances_to_arena_check)
        ind_max_dist = distances_to_arena_check.index(max_dist)
        cluster_center = bus_names_check[ind_max_dist]
        distances_to_arena_check.remove(max_dist)
        bus_names_check.remove(cluster_center)
        #to ignore stops with 0 people assigned:
        people_assigned_next = bus_stops_df.loc[cluster_center, 'passengers']
        if people_assigned_next == 0:
            continue
        cluster_nodelist_dict[cluster_number] += [cluster_center]  # assign cluster center to cluster
        # assigning people to cluster to check the capacity constraint:
        people_assigned += people_assigned_next
        # creating a list to assign to the current cluster:
        cluster_candidates = (matrix.loc[cluster_center,bus_names_check]).to_dict() 
        cluster_candidates_names = list(cluster_candidates.keys())
        cluster_candidates_dist = list(cluster_candidates.values())
        while len(cluster_candidates_dist) != 0:
            min_dist = min(cluster_candidates_dist)
            ind_min_dist = cluster_candidates_dist.index(min_dist)
            new_clust_elem = cluster_candidates_names[ind_min_dist]
            ind_bus_stop = bus_names_check.index(new_clust_elem)
            people_assigned_next = bus_stops_df.loc[new_clust_elem, 'passengers']
            # make sure we do not put in the cluster the stops with 0 people assigned
            if people_assigned_next == 0: #make sure we do not put in cluster the 
                distances_to_arena_check.pop(ind_bus_stop)
                bus_names_check.remove(new_clust_elem)
                cluster_candidates_dist.pop(ind_min_dist)
                cluster_candidates_names.remove(new_clust_elem)
                continue
            if people_assigned + people_assigned_next > capacity: #check capacity constraint
                break
            cluster_nodelist_dict[cluster_number] +=  [new_clust_elem]
            people_assigned += people_assigned_next
            distances_to_arena_check.pop(ind_bus_stop)
            bus_names_check.remove(new_clust_elem)
            cluster_candidates_dist.pop(ind_min_dist)
            cluster_candidates_names.remove(new_clust_elem) 
        cluster_number += 1
    return cluster_nodelist_dict


#CLUSTERING ALGORITHM with SEQUENCE approach
def sequence_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check):
    cluster_nodelist_dict = defaultdict(list)
    cluster_number = 0  # cluster number
    while len(bus_names_check) != 0:
        people_assigned = 0
        max_dist = max(distances_to_arena_check)
        ind_max_dist = distances_to_arena_check.index(max_dist)
        cluster_center = bus_names_check[ind_max_dist]
        distances_to_arena_check.remove(max_dist)
        bus_names_check.remove(cluster_center)
        cluster_nodelist_dict[cluster_number] += [cluster_center]
        people_assigned += bus_stops_df.loc[cluster_center, 'passengers']
        people_assigned_next = 0
        while (people_assigned + people_assigned_next <= capacity) and len(bus_names_check) != 0:
            cluster_candidates = (matrix.loc[cluster_center,bus_names_check]).to_dict()
            cluster_candidates_names = list(cluster_candidates.keys())
            cluster_candidates_dist = list(cluster_candidates.values())
            min_dist = min(cluster_candidates_dist)
            ind_min_dist = cluster_candidates_dist.index(min_dist)
            cluster_center = cluster_candidates_names[ind_min_dist]
            people_assigned_next = bus_stops_df.loc[cluster_center, 'passengers']
            if people_assigned_next == 0:
                ind_bus_stop = bus_names_check.index(cluster_center)
                distances_to_arena_check.pop(ind_bus_stop)
                bus_names_check.remove(cluster_center)
                continue
            if people_assigned + people_assigned_next > capacity:
                break
            cluster_nodelist_dict[cluster_number] +=  [cluster_center]
            ind_bus_stop = bus_names_check.index(cluster_center)
            distances_to_arena_check.pop(ind_bus_stop)
            bus_names_check.remove(cluster_center)
            people_assigned += people_assigned_next
        cluster_number += 1
    return cluster_nodelist_dict

#CLUSTERING ALGORITHM with A-star approach
#k is a hyperparameter to take into account portion of the distance to Arena
def a_star_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check, k):
    cluster_nodelist_dict = defaultdict(list)
    cluster_number = 0  # cluster number
    while len(bus_names_check) != 0:
        people_assigned = 0
        max_dist = max(distances_to_arena_check)
        ind_max_dist = distances_to_arena_check.index(max_dist)
        cluster_center = bus_names_check[ind_max_dist]
        distances_to_arena_check.remove(max_dist)
        bus_names_check.remove(cluster_center)
        cluster_nodelist_dict[cluster_number] += [cluster_center]
        people_assigned += bus_stops_df.loc[cluster_center, 'passengers']
        people_assigned_next = 0
        while (people_assigned + people_assigned_next <= capacity) and len(bus_names_check) != 0:
            cluster_candidates = (matrix.loc[cluster_center, bus_names_check]).to_dict()
            for node, dist in cluster_candidates.items():
                dist_add = matrix.loc[node, "Schlachthof"]
                cluster_candidates[node] = dist + dist_add/k
            cluster_candidates_names = list(cluster_candidates.keys())
            cluster_candidates_dist = list(cluster_candidates.values())
            min_dist = min(cluster_candidates_dist)
            ind_min_dist = cluster_candidates_dist.index(min_dist)
            cluster_center = cluster_candidates_names[ind_min_dist]
            people_assigned_next = bus_stops_df.loc[cluster_center, 'passengers']
            if people_assigned_next == 0:
                ind_bus_stop = bus_names_check.index(cluster_center)
                distances_to_arena_check.pop(ind_bus_stop)
                bus_names_check.remove(cluster_center)
                continue
            if people_assigned + people_assigned_next > capacity:
                break
            cluster_nodelist_dict[cluster_number] +=  [cluster_center]
            ind_bus_stop = bus_names_check.index(cluster_center)
            distances_to_arena_check.pop(ind_bus_stop)
            bus_names_check.remove(cluster_center)
            people_assigned += people_assigned_next
        cluster_number += 1
    return cluster_nodelist_dict


#Choose one of the clustering methods
#Cloud approach:
#cluster_nodelist_dict = cloud_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check)
#Sequence approach:
#cluster_nodelist_dict = sequence_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check)
#A-star approach:
cluster_nodelist_dict = a_star_cluster(bus_stops_df, capacity, distances_to_arena_check, bus_names_check, 4)


number_of_clusters = len(cluster_nodelist_dict.keys())#amount of clusters


#to calculate amount of bus_stops in all clusters
amount_stops = 0
len_list = []
for list_ in list(cluster_nodelist_dict.values()):
    amount_stops += len(list_)


#to check repeated nodes in clusters:
amount = 0
len_list = []
list_of_lists = list(cluster_nodelist_dict.values())
alarm = []
for list_ in list_of_lists:
    list_of_lists_check = list_of_lists.copy()
    list_of_lists_check.remove(list_)
    count = 0
    for elem in list_:
        for list_1 in list_of_lists_check:
            if elem in list_1:
                count += 1
    alarm.append(count)

#Create new dataframe with cluster numbers (and passenger numbers)
bus_stops_gdf = gp.GeoDataFrame(bus_stops_df, geometry=gp.points_from_xy(bus_stops_df.x, bus_stops_df.y))
cluster_gdf = bus_stops_gdf.copy()
#cluster_gdf["passengers"] = np.array(pd.read_csv("passengers_at_stop.csv")).flatten()
cluster_gdf['cluster'] = ['']*cluster_gdf.shape[0]
for clr_number, clr_list in cluster_nodelist_dict.items():
    cluster_gdf.loc[clr_list, "cluster"] = clr_number
cluster_gdf['name'] = cluster_gdf.index
cluster_gdf.index = [i for i in range(cluster_gdf.shape[0])]

cluster_gdf.to_csv('Clustered_road_distance_A_star_3.csv')

#To put clusters on the map:

#create one dataframe per cluster
cluster_df_list = []
for cluster_number in cluster_nodelist_dict.keys():
    cluster_df = cluster_gdf[cluster_gdf["cluster"] == cluster_number]
    cluster_df_list.append(cluster_df)


# Get graph of Kreis Lüneburg:
# kreis_lüneburg_gdf = ox.geocoder.geocode_to_gdf("R2084746", which_result=None, by_osmid=True, buffer_dist=None)
# kreis_lüneburg_geom = kreis_lüneburg_gdf['geometry'].iloc[0]
# graph = ox.graph_from_polygon(kreis_lüneburg_geom, network_type ="drive")

# Get graph of Lüneburg only:
location_name = 'Lüneburg'
graph = ox.graph_from_place(location_name, network_type="drive")


#create list of colors (default mode seems to work better)
#colors = cm.rainbow(np.linspace(0, 2, number_of_clusters))
#random.shuffle(colors)


#plot map with clusters
fig, ax = ox.plot_graph(graph, show=False, close=False)
#for df, color in zip(cluster_df_list,colors) :
for df in cluster_df_list:
    df.plot(ax=ax, markersize = 10, alpha=1, zorder=7)
#df.plot(ax=ax, markersize = 10, alpha=1, zorder=7, color=color)
plt.show()




