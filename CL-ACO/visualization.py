# -*- coding: utf-8 -*-
"""Map_osmnx_228.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T69sZuGXiLQDELsW3qUq5R4DEhQ0gKsk
"""

import pickle
import numpy as np
import osmnx as ox
import os
import random

os.chdir(os.path.dirname(os.path.realpath(__file__)))

#%%

def plot_routes(new_result_dir, best_route_osmids):

    np.random.seed(0)
    ox.__version__
    
    towns = ['Bardowick, Bardowick, Germany',
             'Vögelsen, Bardowick, Germany' ,
             'Barum, Bardowick, Germany',
             'Handorf, Bardowick, Germany',
             'Mechtersen, Bardowick, Germany',
             'Radbruch, Bardowick, Germany',
             'Wittorf, Bardowick, Germany',
             
             'Kirchgellersen, Gellersen, Germany',
             'Reppenstedt, Gellersen, Germany',
             'Südergellersen, Gellersen, Germany',
             'Westergellersen, Gellersen, Germany',
             
             'Barnstedt, Ilmenau, Germany',
             'Deutsch Evern, Ilmenau, Germany',
             'Embsen, Ilmenau, Germany',
             'Melbeck, Ilmenau, Germany',
             
             'Barendorf, Ostheide, Germany',
             'Neetze, Ostheide, Germany',
             'Reinstorf, Ostheide, Germany',
             'Thomasburg, Ostheide, Germany',
             'Vastorf, Ostheide, Germany',
             'Wendisch Evern, Ostheide, Germany',
             
             'Artlenburg, Scharnebeck, Germany',
             'Brietlingen, Scharnebeck, Germany',
             'Echem, Scharnebeck, Germany',
             'Hittbergen, Scharnebeck, Germany',
             'Lüdersburg, Scharnebeck, Germany',
             'Rullstorf, Scharnebeck, Germany',
             'Scharnebeck, Scharnebeck, Germany',
            
            'Lüneburg, Germany',
            
            'Adendorf, Germany',
                    'Amelinghausen, Amelinghausen, Germany',
             
            'Bleckede, Lüneburg, Germany',
             
            'Dahlenburg, Dahlenburg, Germany']
    
    # Create a graph from osm using the cities above
    L = ox.graph_from_place(towns, network_type = 'drive_service', simplify=True)
    
    # Import previously computed routes 
    # (only when not running "run.py"; e.g. for trying out/ debugging)
#    with open(new_result_dir+"/best/best_route_osmids.obj", 'rb') as f: 
#      routes = pickle.load(f)
    
    # use best routes from current run  
    routes = best_route_osmids
        
    # Create flat routes
    flat_routes_0 = []
    for i in range(len(routes)-1):
        r11=routes[i]
        route = []
        routes_ndopp = []
        for j in range(len(r11)):
          paths = ox.shortest_path(L, r11[j][0],r11[j][1], weight='length')
          route.append(paths)
          routes_nlast = route[:-1]
        for li in routes_nlast:
          routes_ndopp.append(li[:-1])
        routes_ndopp.append(route[-1])
        flat_route = [val for sublist in routes_ndopp for val in sublist]
        flat_routes_0.append(flat_route)
    
    # Loop over all routes to combine them in one plot
    route_plot = ox.plot_route_folium(L, flat_routes_0[0], route_color='pink', popup_attribute="length", route_opacity = 0.5, weight=2) 
    
    for route in flat_routes_0[1:]:
        route_plot = ox.plot_route_folium(L, route, 
                                          route_map=route_plot, 
                                          route_color = ["#"+''.join([random.choice('ABCDEF0123456789') for i in range(6)])], 
                                          route_opacity = 0.5, 
                                          popup_attribute="length", 
                                          weight=2)
    # Save the output as html
    filepath = new_result_dir+"/best/route_graph.html"
    route_plot.save(filepath)
    
